services:
  postgres_prod:
    image: postgres:16
    container_name: ordemservico_postgres_prod
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: OrdemServicoDb
    ports:
      - "5432:5432"
    volumes:
      - pgdata_prod:/var/lib/postgresql/data
    networks:
      - ordemservico_net

  mongodb_prod:
    image: mongo:7
    container_name: ordemservico_mongodb_prod
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongodata_prod:/data/db
    networks:
      - ordemservico_net

  rabbitmq_prod:
    image: rabbitmq:3-management
    container_name: ordemservico_rabbitmq_prod
    restart: always
    ports:
      - "15672:15672"  # UI Admin
      - "5672:5672"    # Comunicação
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    networks:
      - ordemservico_net

  api_prod:
    container_name: ordemservico_api_prod
    build:
      context: ..                  # raiz do projeto
      dockerfile: docker/api.Dockerfile
    restart: always
    ports:
      - "5000:80"
      - "5001:443"
    volumes:
      - ./https:/https:ro
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    networks:
      - ordemservico_net
    depends_on:
      - postgres_prod
      - mongodb_prod
      - rabbitmq_prod
  worker_prod:
    container_name: ordemservico_worker_prod
    build:
      context: ..                  # raiz do projeto
      dockerfile: docker/worker.Dockerfile
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    networks:
      - ordemservico_net
    depends_on:
      - postgres_prod
      - mongodb_prod
      - rabbitmq_prod
      
networks:
  ordemservico_net:
    driver: bridge
    
volumes:
  pgdata_prod:
  mongodata_prod:
